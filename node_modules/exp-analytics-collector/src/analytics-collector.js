import AnalyticEvent from './analytic-event';

const DEFAULT_VERSION = 1;
const noop = () => {};

class AnalyticsCollector {
  init(urlBase, appName, gaId, mfgId, campaignId, AnalyticEventImpl=AnalyticEvent, ga=window.ga) {
    this.url = urlBase + '/1.0/analyticEvent';
    this.appName = appName;
    this.gaId = gaId;
    this.mfgId = mfgId;
    this.campaignId = campaignId;
    this.rootEventId = '';
    this.AnalyticEvent = AnalyticEventImpl;
    this.ga = ga;

    this.sendToGA('create', this.gaId, 'auto');
    return this;
  }

  sendEvent(action, data={}, version=DEFAULT_VERSION, consumers=[], parent=this.rootEventId, fireOffGA=false, success=noop, error=noop) {
    return this.doSend(this.createAnalyticsEvent(action, data, version, consumers, parent), fireOffGA, success, error);
  }

  createAnalyticsEvent(action, data, version, consumers, parent) {
    return new this.AnalyticEvent(action, data, this.appName, version, this.guid(), consumers, parent).toJSON();
  }

  doSend(data, fireOffGa=false, success=noop, error=noop) {
    data.url = window.location.href;
    data.userAgent = navigator.userAgent;
    data.referrer = document.referrer;
    data.mfgId = data.mfgId || this.mfgId;
    data.campaignId = data.campaignId || this.campaignId;

    if (fireOffGa) {
      this.sendToGA('send', 'event', this.appName, data.action, data.label || data.url, {
        hitCallback: success
      });
    }

    this.doPostRequest(data, success, error);

    return data;
  }

  pv(data, success=noop, error=noop) {
    this.sendToGA('send', 'pageview');

    this.rootEventId = this.sendEvent('PAGEVIEW', data, 1, undefined, undefined, false, success, error).eventId;
    return this.rootEventId;
  }

  guid() {
    const s4 = () => {
      return Math.floor((1 + Math.random()) * 0x10000)
        .toString(16)
        .substring(1);
    };

    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
  }

  sendToGA() {
    if (this.ga && this.gaId) {
      this.ga.apply(null, arguments);
    }
  }

  doPostRequest(data, success=noop, error=noop) {
    let xhr;
    const body = JSON.stringify(data);

    if (window.XMLHttpRequest) {
      xhr = new window.XMLHttpRequest();
    } else if (window.ActiveXObject) {
      xhr = new window.ActiveXObject('MSXML2.XMLHTTP.3.0');
    } else {
      throw new Error('Cannot make request due to the browser being old');
    }

    xhr.open('POST', this.url);
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
    xhr.send(body);
    xhr.onreadystatechange = function() {
      if (xhr.readyState === 4) {
        if (xhr.status < 300) {

          try {
            success.call(this, JSON.parse(xhr.responseText));
          } catch (e) {
            error.call(this, e);
          }
        } else {
          error.call(this, xhr.responseText || xhr.statusText);
        }
      }
    };
  }
}

export default AnalyticsCollector;
